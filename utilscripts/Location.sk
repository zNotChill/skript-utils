
# @name Location_getExtremes
# @description Gets the extremes of two locations
#
# @author zNotChill
# @param {location} pos1 - The first position
# @param {location} pos2 - The second position
# @returns {locations} - The lowest and highest corners

function Location_getExtremes(pos1: location, pos2: location) :: locations:
  set {_lowestCorner} to {_pos1}
  set {_highestCorner} to {_pos2}
  if y coord of {_pos2} < y coord of {_pos1}:
    set {_lowestCorner} to {_pos2}
    set {_highestCorner} to {_pos1}
  return {_lowestCorner}, {_highestCorner}

# @name Location_checkAABB
# @description Checks if a location is within an AABB
#
# @author zNotChill
# @param {location} loc - The location to check
# @param {location} corner1 - The first corner of the AABB
# @param {location} corner2 - The second corner of the AABB
# @returns {boolean} - Whether the location is within the AABB

function Location_checkAABB(loc: location, corner1: location, corner2: location) :: boolean:
  set {_extremes::*} to Location_getExtremes({_corner1}, {_corner2})
  set {_lowest} to {_extremes::1}
  set {_highest} to {_extremes::2}
  if:
    x coord of {_loc} >= x coord of {_lowest}
    x coord of {_loc} <= x coord of {_highest}
    y coord of {_loc} >= y coord of {_lowest}
    y coord of {_loc} <= y coord of {_highest}
    z coord of {_loc} >= z coord of {_lowest}
    z coord of {_loc} <= z coord of {_highest}
  then:
    return true
  return false

# @name Location_parseChunk
# @description Parses a chunk from a string Vector2 location
#
# @author miberss
# @param {string} chunk - The chunk to parse
# @returns {location} - The parsed chunk coordinates
# @example Location_parseChunk("world:0,0") -> chunk (0,0) of world

function Location_parseChunk(chunk: string) :: chunk:
  replace ":" in {_chunk} with ","
  set {_coords::*} to split {_chunk} at ","
  set {_coords::2} to {_coords::2} parsed as integer
  set {_coords::3} to {_coords::3} parsed as integer
  
  return chunk at {_coords::2}, {_coords::3} in {_coords::1}