
# @name Test_announce
# @description Announces the result of a test
#
# @param {string} test_id - The ID of the test
# @param {boolean} success - Whether the test succeeded

function Test_announce(test_id: string, success: boolean = true):
  if {_success} = true:
    set {_prefix} to "✔"
    set {_color} to "&a"
    set {_text} to "succeeded"
    set {_matched} to "matched"
  else:
    set {_prefix} to "✖"
    set {_color} to "&c"
    set {_text} to "failed"
    set {_matched} to "did not match"

  broadcast "%{_color}%%{_prefix}% &7Test %{_color}%%{_test_id}% &7%{_text}%. Value %{_color}%%{-tests::%{_test_id}%::value}% &7%{_matched}% %{_color}%%{-tests::%{_test_id}%::expected}%&7."
  delete {-tests::%{_test_id}%::*}

# @name Test_assert
# @description Asserts a value
#
# @param {string} test_id - The ID of the test
# @param {object} value - The value to assert
# @param {object} expected - The expected value

function Test_assert(test_id: string, value: object, expected: object):
  set {-tests::%{_test_id}%::value} to "%{_value}%"
  set {-tests::%{_test_id}%::expected} to "%{_expected}%"

  if {_value} = {_expected}:
    Test_announce({_test_id}, true)
  else:
    Test_announce({_test_id}, false)

# @name Test_assertEqual
# @description Asserts that two values are equal
#
# @param {string} test_id - The ID of the test
# @param {object} value - The value to assert
# @param {object} expected - The expected value

function Test_assertEqual(test_id: string, value: object, expected: object):
  Test_assert({_test_id}, "%{_value}%", "%{_expected}%")

# @name Test_assertNotEqual
# @description Asserts that two values are not equal
#
# @param {string} test_id - The ID of the test
# @param {object} value - The value to assert
# @param {object} expected - The expected value

function Test_assertNotEqual(test_id: string, value: object, expected: object):
  if {_value} != {_expected}:
    Test_announce({_test_id}, true)
  else:
    Test_announce({_test_id}, false)