
# @name Time_ago
# @description Returns a string representing the time elapsed since the given time
#
# @authors zNotChill
# @param {string} timeStr ["0"] - The time to compare
# @returns {string} - The time elapsed since the given time
# @dependencies java.time.Instant, java.time.Duration

function Time_ago(timeStr: string) :: string:
  set {_parsedTime} to Instant.parse({_timeStr})
  set {_now} to Instant.now()
  set {_duration} to Duration.between({_parsedTime}, {_now})

  if {_duration}.toDays() > 0:
    return "%{_duration}.toDays()% days ago"
  if {_duration}.toHours() > 0:
    return "%{_duration}.toHours()% hours ago"
  if {_duration}.toMinutes() > 0:
    return "%{_duration}.toMinutes()% minutes ago"

  return "%{_duration}.toSeconds()% seconds ago"

# @name Time_agoUnix
# @description Returns a string representing the time elapsed since the given time
#
# @authors zNotChill
# @param {integer} time - The time to compare
# @returns {string} - The time elapsed since the given time
# @dependencies java.time.Instant, java.time.Duration

function Time_agoUnix(time: integer) :: string:
  set {_parsedTime} to Instant.ofEpochSecond({_time})
  set {_now} to Instant.now()
  set {_duration} to Duration.between({_parsedTime}, {_now})

  if {_duration}.toDays() > 0:
    return "%{_duration}.toDays()% days ago"
  if {_duration}.toHours() > 0:
    return "%{_duration}.toHours()% hours ago"
  if {_duration}.toMinutes() > 0:
    return "%{_duration}.toMinutes()% minutes ago"

  return "%{_duration}.toSeconds()% seconds ago"

# @name Time_durationBetween
# @description Returns a string representing the duration between two times
#
# @authors zNotChill
# @param {string} timeStr1 - The first time
# @param {string} timeStr2 - The second time
# @dependencies java.time.Instant, java.time.Duration

function Time_durationBetween(timeStr1: string, timeStr2: string) :: string:
  set {_parsedTime1} to Instant.parse({_timeStr1})
  set {_parsedTime2} to Instant.parse({_timeStr2})
  set {_duration} to Duration.between({_parsedTime1}, {_parsedTime2})

  if {_duration}.toDays() > 0:
    return "%{_duration}.toDays()% days"
  if {_duration}.toHours() > 0:
    return "%{_duration}.toHours()% hours"
  if {_duration}.toMinutes() > 0:
    return "%{_duration}.toMinutes()% minutes"

  return "%{_duration}.toSeconds()% seconds"

# @name Time_durationBetweenUnix
# @description Returns a string representing the duration between two times
#
# @authors zNotChill
# @param {integer} time1 - The first time
# @param {integer} time2 - The second time
# @dependencies java.time.Instant, java.time.Duration

function Time_durationBetweenUnix(time1: integer, time2: integer) :: string:
  set {_parsedTime1} to Instant.ofEpochSecond({_time1})
  set {_parsedTime2} to Instant.ofEpochSecond({_time2})
  set {_duration} to Duration.between({_parsedTime1}, {_parsedTime2})

  if {_duration}.toDays() > 0:
    return "%{_duration}.toDays()% days"
  if {_duration}.toHours() > 0:
    return "%{_duration}.toHours()% hours"
  if {_duration}.toMinutes() > 0:
    return "%{_duration}.toMinutes()% minutes"

  return "%{_duration}.toSeconds()% seconds"

# @name Time_getUnixFromStr
# @description Returns the Unix time from a string
#
# @authors zNotChill
# @param {string} timeStr - The time string
# @returns {integer} - The Unix time
# @dependencies java.time.Instant

function Time_getUnixFromStr(timeStr: string) :: integer:
  return Instant.parse({_timeStr}).getEpochSecond()

# @name Time_getStrFromUnix
# @description Returns the string from a Unix time
#
# @authors zNotChill
# @param {integer} time - The Unix time
# @returns {string} - The time string
# @dependencies java.time.Instant

function Time_getDurationString(duration: number) :: string:
  set {_result} to ""
  set {_hours} to 0
  set {_minutes} to 0
  set {_seconds} to {_seconds}

  if {_seconds} >= 3600:
    set {_hours} to floor({_seconds} / 3600)
    set {_seconds} to mod({_seconds}, 3600)
    set {_result} to "%{_hours}%h"
    if {_seconds} >= 60:
      set {_minutes} to floor({_seconds} / 60)
      set {_seconds} to mod({_seconds}, 60)
      if {_hours} > 0:
        set {_result} to "%{_result}% %{_minutes}%m"
      else:
        set {_result} to "%{_minutes}%m"
  else:
    if {_seconds} is greater than 60:
      set {_minutes} to floor({_seconds} / 60)
      set {_seconds} to mod({_seconds}, 60)
      set {_result} to "%{_minutes}%m"
    if {_seconds} is greater than 0:
      if {_minutes} > 0:
        set {_result} to "%{_result}% %{_seconds}%s"
      else:
        set {_result} to "%{_seconds}%s"
  return {_result}