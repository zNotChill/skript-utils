
# @name Text_concat
# @description Concatenates multiple strings
#
# @param {string} str1 - The first string
# @param {string} str2 - The second string
# @param {string} str3 - The third string
# @param {string} str4 - The fourth string
# @param {string} str5 - The fifth string
# @param {string} str6 - The sixth string
# @param {string} str7 - The seventh string
# @param {string} str8 - The eighth string
# @param {string} str9 - The ninth string
# @param {string} str10 - The tenth string
# @returns {string} - The concatenated string

function Text_concat(str1: string = "", str2: string = "", str3: string = "", str4: string = "", str5: string = "", str6: string = "", str7: string = "", str8: string = "", str9: string = "", str10: string = "") :: string:
  return "%{_str1}%%{_str2}%%{_str3}%%{_str4}%%{_str5}%%{_str6}%%{_str7}%%{_str8}%%{_str9}%%{_str10}%"

# @name Text_format
# @description Formats a string with multiple values
#
# @param {string} str - The string to format
# @param {string} val1 - The first value
# @param {string} val2 - The second value
# @param {string} val3 - The third value
# @param {string} val4 - The fourth value
# @param {string} val5 - The fifth value
# @param {string} val6 - The sixth value
# @param {string} val7 - The seventh value
# @param {string} val8 - The eighth value
# @param {string} val9 - The ninth value
# @param {string} val10 - The tenth value
# @returns {string} - The formatted string

function Text_format(str: string, val1: string, val2: string = "", val3: string = "", val4: string = "", val5: string = "", val6: string = "", val7: string = "", val8: string = "", val9: string = "", val10: string = "") :: string:
  return {_str}.formatted({_val1}, {_val2}, {_val3}, {_val4}, {_val5}, {_val6}, {_val7}, {_val8}, {_val9}, {_val10})

# @name Text_coloredBoolean
# @description Returns a colored string based on a boolean value
#
# @param {boolean} value - The boolean value
# @returns {string} - The colored string

function Text_coloredBoolean(value: boolean) :: string:
  if {_value} = true:
    return "&aTrue"
  return "&cFalse"

# @name Text_toSmallFont
# @description Converts text to small font
#
# @param {string} text - The text to convert
# @returns {string} - The converted text

function Text_toSmallFont(text: string) :: string:
  clear {_chars::*}
  # ᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴘǫʀѕᴛᴜᴠᴡхʏᴢ₀₁₂₃₄₅₆₇₈₉:
  add "a=ᴀ" to {_chars::*}
  add "b=ʙ" to {_chars::*}
  add "c=ᴄ" to {_chars::*}
  add "d=ᴅ" to {_chars::*}
  add "e=ᴇ" to {_chars::*}
  add "f=ꜰ" to {_chars::*}
  add "g=ɢ" to {_chars::*}
  add "h=ʜ" to {_chars::*}
  add "i=ɪ" to {_chars::*}
  add "j=ᴊ" to {_chars::*}
  add "k=ᴋ" to {_chars::*}
  add "l=ʟ" to {_chars::*}
  add "m=ᴍ" to {_chars::*}
  add "n=ɴ" to {_chars::*}
  add "o=ᴏ" to {_chars::*}
  add "p=ᴘ" to {_chars::*}
  add "q=ǫ" to {_chars::*}
  add "r=ʀ" to {_chars::*}
  add "s=ѕ" to {_chars::*}
  add "t=ᴛ" to {_chars::*}
  add "u=ᴜ" to {_chars::*}
  add "v=ᴠ" to {_chars::*}
  add "w=ᴡ" to {_chars::*}
  add "x=х" to {_chars::*}
  add "y=ʏ" to {_chars::*}
  add "z=ᴢ" to {_chars::*}
  add "0=₀" to {_chars::*}
  add "1=₁" to {_chars::*}
  add "2=₂" to {_chars::*}
  add "3=₃" to {_chars::*}
  add "4=₄" to {_chars::*}
  add "5=₅" to {_chars::*}
  add "6=₆" to {_chars::*}
  add "7=₇" to {_chars::*}
  add "8=₈" to {_chars::*}
  add "9=₉" to {_chars::*}
  add ":=:" to {_chars::*}

  set {_text::*} to split {_text} at ""
  set {_output} to ""
  loop ({_text::*}):
    add 1 to {_i}
    set {_char} to loop-value
    loop {_chars::*}:
      set {_split::*} to split loop-value-2 by "="
      if {_text::%{_i} - 1%} = "&": # fix color codes
        set {_outChar} to {_char}
        stop loop

      if {_char} = "<":
        set {_openTag} to true
      
      if {_openTag} = true:
        set {_outChar} to {_char}
        if {_char} = ">":
          set {_openTag} to false
          stop loop
        stop loop

      if {_char} = {_split::1}:
        set {_outChar} to {_split::2}
        stop loop
      else:
        set {_outChar} to {_char}
    set {_output} to "%{_output}%%{_outChar}%"

  return {_output}

# @name Text_removeColorCodes
# @description Removes color codes from a string
#
# @param {string} text - The text to remove color codes from
# @returns {string} - The text without color codes

function Text_removeColorCodes(text: string) :: string:
  # remove any text with & and a letter
  set {_text} to raw {_text}
  set {_split::*} to split {_text} at ""

  loop {_split::*}:
    set {_char} to loop-value
    if {_char} = "&":
      set {_deleteNextChar} to true
      continue
    if {_deleteNextChar} = true:
      set {_deleteNextChar} to false
      continue
    add {_char} to {_output::*}
  return join {_output::*} by ""

# @name Text_formatText
# @description Formats text
#
# @param {string} text - The text to format
# @returns {string} - The formatted text

function Text_formatText(text: string) :: string:
  if {_text} starts with "st:":
    replace "st:" in {_text} with ""
    set {_text} to Text_toSmallFont({_text})

  return {_text}

# @name Text_toNumber
# @description Converts a string to a number
#
# @param {string} text - The text to convert
# @returns {number} - The converted number

function Text_toNumber(text: string) :: number:
  return {_text} parsed as number