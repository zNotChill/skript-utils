
import:
  java.time.Duration
  java.time.Instant
  java.time.temporal.ChronoUnit

# Dependencies: java.time.Instant, java.time.Duration
function Time_ago(timeStr: string) :: string:
  set {_parsedTime} to Instant.parse({_timeStr})
  set {_now} to Instant.now()
  set {_duration} to Duration.between({_parsedTime}, {_now})

  if {_duration}.toDays() > 0:
    return "%{_duration}.toDays()% days ago"
  if {_duration}.toHours() > 0:
    return "%{_duration}.toHours()% hours ago"
  if {_duration}.toMinutes() > 0:
    return "%{_duration}.toMinutes()% minutes ago"

  return "%{_duration}.toSeconds()% seconds ago"

# Dependencies: java.time.Instant, java.time.Duration
function Time_agoUnix(time: integer) :: string:
  set {_parsedTime} to Instant.ofEpochSecond({_time})
  set {_now} to Instant.now()
  set {_duration} to Duration.between({_parsedTime}, {_now})

  if {_duration}.toDays() > 0:
    return "%{_duration}.toDays()% days ago"
  if {_duration}.toHours() > 0:
    return "%{_duration}.toHours()% hours ago"
  if {_duration}.toMinutes() > 0:
    return "%{_duration}.toMinutes()% minutes ago"

  return "%{_duration}.toSeconds()% seconds ago"

# Dependencies: java.time.Instant, java.time.Duration
function Time_durationBetween(timeStr1: string, timeStr2: string) :: string:
  set {_parsedTime1} to Instant.parse({_timeStr1})
  set {_parsedTime2} to Instant.parse({_timeStr2})
  set {_duration} to Duration.between({_parsedTime1}, {_parsedTime2})

  if {_duration}.toDays() > 0:
    return "%{_duration}.toDays()% days"
  if {_duration}.toHours() > 0:
    return "%{_duration}.toHours()% hours"
  if {_duration}.toMinutes() > 0:
    return "%{_duration}.toMinutes()% minutes"

  return "%{_duration}.toSeconds()% seconds"

# Dependencies: java.time.Instant, java.time.Duration
function Time_durationBetweenUnix(time1: integer, time2: integer) :: string:
  set {_parsedTime1} to Instant.ofEpochSecond({_time1})
  set {_parsedTime2} to Instant.ofEpochSecond({_time2})
  set {_duration} to Duration.between({_parsedTime1}, {_parsedTime2})

  if {_duration}.toDays() > 0:
    return "%{_duration}.toDays()% days"
  if {_duration}.toHours() > 0:
    return "%{_duration}.toHours()% hours"
  if {_duration}.toMinutes() > 0:
    return "%{_duration}.toMinutes()% minutes"

  return "%{_duration}.toSeconds()% seconds"

# Dependencies: java.time.Instant
function Time_getUnixFromStr(timeStr: string) :: integer:
  return Instant.parse({_timeStr}).getEpochSecond()